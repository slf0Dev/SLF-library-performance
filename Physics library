local partsWithId = {}
local awaitRef = {}

local root = {
	ID = 0;
	Type = "ModuleScript";
	Properties = {
		Name = "Nature2D";
	};
	Children = {
		{
			ID = 1;
			Type = "Folder";
			Properties = {
				Name = "Constants";
			};
			Children = {
				{
					ID = 2;
					Type = "ModuleScript";
					Properties = {
						Name = "Globals";
					};
					Children = {};
				};
			};
		};
		{
			ID = 3;
			Type = "Folder";
			Properties = {
				Name = "Debugging";
			};
			Children = {
				{
					ID = 4;
					Type = "ModuleScript";
					Properties = {
						Name = "TypeErrors";
					};
					Children = {};
				};
				{
					ID = 5;
					Type = "ModuleScript";
					Properties = {
						Name = "Exceptions";
					};
					Children = {};
				};
				{
					ID = 6;
					Type = "ModuleScript";
					Properties = {
						Name = "Restrict";
					};
					Children = {};
				};
			};
		};
		{
			ID = 7;
			Type = "Folder";
			Properties = {
				Name = "Physics";
			};
			Children = {
				{
					ID = 8;
					Type = "ModuleScript";
					Properties = {
						Name = "RigidBody";
					};
					Children = {};
				};
				{
					ID = 9;
					Type = "ModuleScript";
					Properties = {
						Name = "Point";
					};
					Children = {};
				};
				{
					ID = 10;
					Type = "ModuleScript";
					Properties = {
						Name = "Constraint";
					};
					Children = {};
				};
			};
		};
		{
			ID = 11;
			Type = "Folder";
			Properties = {
				Name = "Utilities";
			};
			Children = {
				{
					ID = 12;
					Type = "ModuleScript";
					Properties = {
						Name = "Signal";
					};
					Children = {};
				};
				{
					ID = 13;
					Type = "ModuleScript";
					Properties = {
						Name = "Quadtree";
					};
					Children = {};
				};
				{
					ID = 14;
					Type = "ModuleScript";
					Properties = {
						Name = "Line";
					};
					Children = {};
				};
				{
					ID = 15;
					Type = "ModuleScript";
					Properties = {
						Name = "Janitor";
					};
					Children = {
						{
							ID = 16;
							Type = "ModuleScript";
							Properties = {
								Name = "Symbol";
							};
							Children = {};
						};
						{
							ID = 17;
							Type = "ModuleScript";
							Properties = {
								Name = "GetPromiseLibrary";
							};
							Children = {};
						};
					};
				};
			};
		};
		{
			ID = 18;
			Type = "ModuleScript";
			Properties = {
				Name = "Engine";
			};
			Children = {};
		};
		{
			ID = 19;
			Type = "ModuleScript";
			Properties = {
				Name = "Types";
			};
			Children = {};
		};
		{
			ID = 20;
			Type = "ModuleScript";
			Properties = {
				Name = "Plugins";
			};
			Children = {
				{
					ID = 21;
					Type = "ModuleScript";
					Properties = {
						Name = "MouseConstraint";
					};
					Children = {};
				};
				{
					ID = 22;
					Type = "ModuleScript";
					Properties = {
						Name = "Quad";
					};
					Children = {};
				};
				{
					ID = 23;
					Type = "ModuleScript";
					Properties = {
						Name = "Triangle";
					};
					Children = {};
				};
			};
		};
	};
};

local function Scan(item, parent)
	local obj = Instance.new(item.Type)
	if (item.ID) then
		local awaiting = awaitRef[item.ID]
		if (awaiting) then
			awaiting[1][awaiting[2]] = obj
			awaitRef[item.ID] = nil
		else
			partsWithId[item.ID] = obj
		end
	end
	for p,v in pairs(item.Properties) do
		if (type(v) == "string") then
			local id = tonumber(v:match("^_R:(%w+)_$"))
			if (id) then
				if (partsWithId[id]) then
					v = partsWithId[id]
				else
					awaitRef[id] = {obj, p}
					v = nil
				end
			end
		end
		obj[p] = v
	end
	for _,c in pairs(item.Children) do
		Scan(c, obj)
	end
	obj.Parent = parent
	return obj
end

return function() return Scan(root, nil) end
